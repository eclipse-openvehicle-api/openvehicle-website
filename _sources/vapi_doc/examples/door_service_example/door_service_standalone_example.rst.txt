.. _vapi-door_standalone_example:

Door Standalone Example
=======================


.. note:: 
   | Example can be found in ``<output-folder>/examples/bin``:
   | door_demo_example

.. image:: ../../../vapi_media/examples/door_service_example/door_standalone_example.png

The example shows how to write an application independent from the underlying vehicle. It request the interfaces of the doors and will use the available interfaces and ignores the rest. Therefore the service is independent from the number of doors.

The standalone application loads all components in its own process. The :term:`Complex Service` will automatically started in another process. Therefore the :term:`Proxy` and :term:`Stub` of the :term:`Basic Service` :term:`Interface` s is required while for the :term:`Vehicle Device` :term:`Interface` it is not. :term:`Proxy` and :term:`Stub` is created by the ``sdv_idl_compiler`` when compiling the IDL files.

Because the :term:`Data Dispatch Service`and :term:`Vehcile Device` is in the same process the values can be read and displayed.

.. note:: There is one difference to the other examples: It does not use the utility ``sdv_vss_util`` to autogenerate :term:`Vehicle Device` s and :term:`Basic Service` s . Instead, the RX and TX are handled in one component. The code is checked in while in the other examples the code for the :term:`Vehicle Device` s and :term:`Basic Service` is created in the CMake configuration.
