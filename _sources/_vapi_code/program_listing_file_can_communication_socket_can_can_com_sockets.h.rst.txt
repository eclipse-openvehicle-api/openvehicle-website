
.. _program_listing_file_can_communication_socket_can_can_com_sockets.h:

Program Listing for File can_com_sockets.h
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file_can_communication_socket_can_can_com_sockets.h>` (``can_communication_socket_can\can_com_sockets.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef CAN_COM_SOCKET_H
   #define CAN_COM_SOCKET_H
   
   #include <iostream>
   #include <cstring>
   #include <deque>
   #include <set>
   #include <thread>
   #include <mutex>
   #include <ifaddrs.h>
   #include <net/if.h>
   #include <sys/socket.h>
   #include <sys/types.h>
   #include <sys/ioctl.h>
   #include <linux/can.h>
   #include <linux/if.h>
   #include <unistd.h>
   #include <fcntl.h>
   
   #include <support/toml.h>
   #include <support/component_impl.h>
   #include <interfaces/can.h>
   
   #ifndef __linux__
   // cppcheck-suppress preprocessorErrorDirective
   #error This code builds only on LINUX
   #endif
   
   class CCANSockets : public sdv::CSdvObject, public sdv::IObjectControl, public sdv::can::IRegisterReceiver,
       public sdv::can::ISend, sdv::can::IInformation
   {
   public:
   
       // Interface map
       BEGIN_SDV_INTERFACE_MAP()
           SDV_INTERFACE_ENTRY(sdv::IObjectControl)
           SDV_INTERFACE_ENTRY(sdv::can::IRegisterReceiver)
           SDV_INTERFACE_ENTRY(sdv::can::ISend)
           SDV_INTERFACE_ENTRY(sdv::can::IInformation)
       END_SDV_INTERFACE_MAP()
   
       DECLARE_OBJECT_CLASS_TYPE(sdv::EObjectType::Device)
       DECLARE_OBJECT_CLASS_NAME("CAN_Com_Sockets")
       DECLARE_DEFAULT_OBJECT_NAME("CAN_Communication_Object")
       DECLARE_OBJECT_SINGLETON()
   
       
       virtual void Initialize(const sdv::u8string& ssObjectConfig) override;
   
       virtual sdv::EObjectStatus GetStatus() const override;
   
       void SetOperationMode(sdv::EOperationMode eMode) override;
   
       virtual void Shutdown() override;
   
       virtual void RegisterReceiver(/*in*/ sdv::can::IReceive* pReceiver) override;
   
       virtual void UnregisterReceiver(/*in*/ sdv::can::IReceive* pReceiver) override;
   
       virtual void Send(/*in*/ const sdv::can::SMessage& sMsg, /*in*/ uint32_t uiConfigIndex) override;
   
       virtual sdv::sequence<sdv::u8string> GetInterfaces() const override;
   
   private:
       void ReceiveThreadFunc();
   
       bool SetupCANSockets(const std::deque<std::string>& vecConfigInterfaces);
   
       void CreateAndBindSockets(const std::deque<std::string>& vecConfigInterfaces,
           const std::set<std::string>& availableInterfaces);
   
       struct SSocketDefinition
       {
           int networkInterface; 
           int32_t localSocket;  
           std::string name;     
       };
   
       std::atomic<sdv::EObjectStatus> m_eStatus = sdv::EObjectStatus::initialization_pending;  
       std::thread                     m_threadReceive;    
       mutable std::mutex              m_mtxReceivers;     
       std::set<sdv::can::IReceive*>   m_setReceivers;     
       mutable std::mutex              m_mtxSockets;       
       std::deque<SSocketDefinition>   m_vecSockets;       
   };
   
   DEFINE_SDV_OBJECT(CCANSockets)
   
   #endif // ! defined CAN_COM_SOCKET_H
