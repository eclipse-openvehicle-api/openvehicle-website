
.. _program_listing_file_sdv_idl_compiler_entities_union_entity.h:

Program Listing for File union_entity.h
=======================================

|exhale_lsh| :ref:`Return to documentation for file <file_sdv_idl_compiler_entities_union_entity.h>` (``sdv_idl_compiler\entities\union_entity.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef UNION_ENTITY_H
   #define UNION_ENTITY_H
   
   #include "definition_entity.h"
   #include "struct_entity.h"
   #include "variable_entity.h"
   #include "entity_value.h"
   #include <set>
   
   class CCaseEntry : public CVariableEntity, public sdv::idl::ICaseEntity
   {
   public:
       CCaseEntry(const CContextPtr& rptrContext, CEntityPtr ptrParent, bool bDefault);
   
       virtual ~CCaseEntry() override = default;
   
       virtual sdv::interface_t GetInterface(sdv::interface_id idInterface) override;
   
       virtual sdv::u8string GetLabel() const override;
   
       virtual bool IsDefault() const override { return m_bDefault; }
   
       const CToken& GetLabelToken() const;
   
       virtual sdv::idl::EEntityType GetType() const override { return sdv::idl::EEntityType::type_case_entry; }
   
       virtual std::string GetDeclTypeStr(bool bResolveTypedef) const override;
   
       virtual void Process() override;
   
       void PostProcess();
   
       virtual bool SupportAssignments() const override { return false; }
   
   private:
       bool                m_bDefault = false;     
       CToken              m_tokenLabel;           
       CEntityPtr          m_ptrLabel;             
       CTokenList          m_lstCaseValue;         
   };
   
   class CUnionEntity : public CStructEntity, public sdv::idl::IUnionEntity
   {
   public:
       CUnionEntity(const CContextPtr& rptrContext, CEntityPtr ptrParent);
   
       virtual ~CUnionEntity() override = default;
   
       virtual sdv::interface_t GetInterface(sdv::interface_id idInterface) override;
   
       virtual sdv::idl::IUnionEntity::ESwitchInterpret GetSwitchInterpretation() const override;
   
       virtual void GetSwitchType(/*out*/ sdv::idl::EDeclType& reType, /*out*/ sdv::IInterfaceAccess*& rpType) const;
   
       virtual void GetSwitchVar(/*out*/ sdv::u8string& rssVarStr, /*out*/ sdv::IInterfaceAccess*& rpVarEntity,
           /*out*/ sdv::IInterfaceAccess*& rpVarContainer) const;
   
       virtual sdv::idl::EEntityType GetType() const override { return sdv::idl::EEntityType::type_union; }
   
       virtual std::string GetDeclTypeStr(bool bResolveTypedef) const override;
   
       virtual void Process() override;
   
       virtual void ProcessDefinitionAddendum() override;
   
       void PostProcess();
   
       virtual bool Supports(EDefinitionSupport eSupport) const override;
   
       virtual bool SupportsAnonymous() const override { return true; }
   
       virtual void CreateValueNode() override;
   
       virtual bool RequireDeclaration() const override;
   
       virtual bool AllowAutoTransparentDeclaration() const override;
   
       void GetSwitchCaseType(sdv::idl::EDeclType& reType, CEntityPtr& rptrType, CValueNodePtr& rptrValue);
   
   private:
       sdv::idl::IUnionEntity::ESwitchInterpret    m_eSwitchInterpret = sdv::idl::IUnionEntity::ESwitchInterpret::switch_type;
       std::string                 m_ssSwitchVar;          
       CTypeDeclaration            m_typedeclSwitch;       
       std::string                 m_ssValueNode;          
       CEntityPtr                  m_ptrContainer;         
       std::set<std::string>       m_setValues;            
       CValueNodePtr               m_ptrSwitchValueNode;   
   
   };
   
   #endif // !defined(UNION_ENTITY_H)
