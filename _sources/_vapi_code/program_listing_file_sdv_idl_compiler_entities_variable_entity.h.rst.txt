
.. _program_listing_file_sdv_idl_compiler_entities_variable_entity.h:

Program Listing for File variable_entity.h
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file_sdv_idl_compiler_entities_variable_entity.h>` (``sdv_idl_compiler\entities\variable_entity.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef DECLARATOR_ENTITY_H
   #define DECLARATOR_ENTITY_H
   
   #include "declaration_entity.h"
   
   class CVariableEntity : public CDeclarationEntity
   {
   public:
       CVariableEntity(const CContextPtr& rptrContext, CEntityPtr ptrParent, bool bConst, bool bAnonymous);
   
       CVariableEntity(const CContextPtr& rptrContext, CEntityPtr ptrParent, const CTokenList& rlstTokenList, bool bConst,
           bool bAnonymous);
   
       virtual ~CVariableEntity() override = default;
   
       virtual sdv::idl::EEntityType GetType() const override
       {
           return m_bPartOfSwitch ? sdv::idl::EEntityType::type_switch_variable : sdv::idl::EEntityType::type_variable;
       }
   
      virtual std::string GetDeclTypeStr(bool bResolveTypedef) const override;
   
       // Suppress cppcheck warning of a useless override. The function is here for better understanding.
       // cppcheck-suppress uselessOverride
       virtual void Process() override;
   
       virtual bool SupportAssignments() const override { return true; }
   
       virtual bool CanSupportComplexTypeAssignments() const override { return true; }
   
       virtual bool SupportArrays() const override { return true; }
   
       virtual bool IsReadOnly() const override { return m_bConst; }
   
       virtual bool RequiresAssignment() const override { return m_bConst; }
   
       virtual bool SupportMultipleDeclarations() const override { return true; }
   
       virtual bool IsAnonymous() const override { return m_bAnonymous; }
   
       void UseAsSwitchVariable() { m_bPartOfSwitch = true; }
   
   protected:
       void SetAnonymous() { m_bAnonymous = true; }
   
       virtual bool SupportInterface() const override { return !m_bConst; }
   
   private:
       bool    m_bConst = false;           
       bool    m_bAnonymous = false;       
       bool    m_bPartOfSwitch = false;    
   };
   
   
   #endif // !defined(DECLARATOR_ENTITY_H)
