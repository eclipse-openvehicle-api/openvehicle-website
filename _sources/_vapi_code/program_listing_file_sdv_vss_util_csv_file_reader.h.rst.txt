
.. _program_listing_file_sdv_vss_util_csv_file_reader.h:

Program Listing for File csv_file_reader.h
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file_sdv_vss_util_csv_file_reader.h>` (``sdv_vss_util\csv_file_reader.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef CSV_FILE_READER_H
   #define CSV_FILE_READER_H
   
   #include <fstream>
   #include "vss_helper.h"
   
   
   class CCSVFileReader : public CVSSHelper
   {
   
   public:
       CCSVFileReader(const std::string& ssFileName, const bool bSilent, const bool bVerbose);
   
       const std::vector<SSignalVDDefinition>& GetVDSignals() const
       {
           return m_vdSignals;
       }
   
       const std::vector<SSignalBSDefinition>& GetBSSignals() const
       {
           return m_bsSignals;
       }
   
   private:
   
       typedef enum vssVDColumns
       {
           column_type,
           column_className,
           column_functionName,
           column_signalName,
           column_vssDefinition,
           column_direction,
           column_signalCType,
           column_canSignalName,
           column_vdDefinition = column_canSignalName,
           column_end
       } vssVDColumns;
   
   
       void Help();
   
       bool ReadCSVVSSFile(const std::string& ssFileName);
   
       void ReadLine(const std::string& ssLine, const uint32_t index, size_t endColumn);
   
       bool AddToExistingVDSignal(std::vector <SSignalVDDefinition>& signals, const std::string& vssDefinition, 
           const sdv::core::ESignalDirection& direction, const std::vector<std::string>& parts, const uint32_t index);
   
       bool AddToExistingBSSignal(std::vector <SSignalBSDefinition>& signals, const std::string& vssDefinition,
           const sdv::core::ESignalDirection& direction, const std::vector<std::string>& parts, const uint32_t index);
   
       void ParseColumns(const std::vector<std::string>& parts, const uint32_t index);
   
       bool AddFunctionVDDefinition(SSignalVDDefinition& signal, const std::string& functionName,
           const std::string& signalName, const std::string& canSignalName, const std::string& idlType, const uint32_t index);
   
       bool AddFunctionBSDefinition(SSignalBSDefinition& signal, const std::string& functionName,
           const std::string& signalName, const std::string& canSignalName, const std::string& idlType, const uint32_t index);
   
       std::vector <SSignalVDDefinition> m_vdSignals;   
       std::vector <SSignalBSDefinition> m_bsSignals; 
   
       bool m_verbose = false;
       bool m_silent = false;
   };
   
   #endif // !defined CSV_FILE_READER_H
