
.. _program_listing_file_interfaces_serdes_hw_ident_serdes.h:

Program Listing for File hw_ident_serdes.h
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file_interfaces_serdes_hw_ident_serdes.h>` (``interfaces\serdes\hw_ident_serdes.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef __IDL_GENERATED__HW_IDENT_SERDES_H__20251008_120502_278__
   #define __IDL_GENERATED__HW_IDENT_SERDES_H__20251008_120502_278__
   
   // Includes...
   #include <cstdint>
   #include <support/serdes.h>
   #include <support/local_service_access.h>
   #include <interfaces/com.h>
   #include <interfaces/serdes/core_ps_serdes.h>
   #include "../hw_ident.h"
   
   #include "core_serdes.h"
   
   // Serializer / deserializer namespace
   namespace serdes
   {
       template <>
       class CSerdes<sdv::hardware::IHardwareID*>
       {
       public:
           static void CalcSize([[maybe_unused]] sdv::hardware::IHardwareID* pInterface, size_t& rnSize)
           {
               sdv::ser_size(sdv::interface_id(), rnSize);
               sdv::ser_size(sdv::ps::TMarshallID(), rnSize);
           }
   
           template <sdv::EEndian eTargetEndianess, typename TCRC>
           static sdv::serializer<eTargetEndianess, TCRC>& Serialize(sdv::serializer<eTargetEndianess, TCRC>& rSerializer, sdv::hardware::IHardwareID* pInterface)
           {
               // Get interface to the component isolation service.
               auto ptrComControl = sdv::core::GetObject("CommunicationControl");
               if (!ptrComControl) throw sdv::ps::XMarshallNotInitialized{};
               sdv::ps::IMarshallAccess* pMarshallAccess = ptrComControl.GetInterface<sdv::ps::IMarshallAccess>();
               if (!pMarshallAccess) throw sdv::ps::XMarshallNotInitialized{};
   
               // Serialize the interface ID first
               rSerializer << sdv::GetInterfaceId<sdv::hardware::IHardwareID>();
   
               // Create and serialize a stub object for the interface.
               sdv::ps::TMarshallID tStubID = pMarshallAccess->GetStub(pInterface);
               rSerializer << tStubID;
   
               return rSerializer;
           }
   
           template <sdv::EEndian eSourceEndianess, typename TCRC>
           static sdv::deserializer<eSourceEndianess, TCRC>& Deserialize(sdv::deserializer<eSourceEndianess, TCRC>& rDeserializer, sdv::hardware::IHardwareID*& rpInterface)
           {
               // Get interface to the component isolation service.
               auto ptrComControl = sdv::core::GetObject("CommunicationControl");
               if (!ptrComControl) throw sdv::ps::XMarshallNotInitialized{};
               sdv::ps::IMarshallAccess* pMarshallAccess = ptrComControl.GetInterface<sdv::ps::IMarshallAccess>();
               if (!pMarshallAccess) throw sdv::ps::XMarshallNotInitialized{};
   
               // Get the interface ID
               sdv::interface_id id = 0;
               rDeserializer >> id;
   
               // Get the stub ID
               sdv::ps::TMarshallID tStubID{};
               rDeserializer >> tStubID;
   
               // Create the proxy
               rpInterface = pMarshallAccess->GetProxy(tStubID, id).get<sdv::hardware::IHardwareID>();
   
               return rDeserializer;
           }
       };
   } // serdes namespace
   
   #endif // !defined(__IDL_GENERATED__HW_IDENT_SERDES_H__20251008_120502_279__)
