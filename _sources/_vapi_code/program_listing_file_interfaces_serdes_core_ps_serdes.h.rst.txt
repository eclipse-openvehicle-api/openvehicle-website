
.. _program_listing_file_interfaces_serdes_core_ps_serdes.h:

Program Listing for File core_ps_serdes.h
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file_interfaces_serdes_core_ps_serdes.h>` (``interfaces\serdes\core_ps_serdes.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef __IDL_GENERATED__CORE_PS_SERDES_H__20251008_120501_714__
   #define __IDL_GENERATED__CORE_PS_SERDES_H__20251008_120501_714__
   
   // Includes...
   #include <cstdint>
   #include <support/serdes.h>
   #include <support/local_service_access.h>
   #include <interfaces/com.h>
   #include <interfaces/serdes/core_ps_serdes.h>
   #include "../core_ps.h"
   
   #include "core_serdes.h"
   #include "process_serdes.h"
   
   // Serializer / deserializer namespace
   namespace serdes
   {
       template <>
       class CSerdes<sdv::ps::XMarshallExcept>
       {
       public:
           static void CalcSize([[maybe_unused]] const sdv::ps::XMarshallExcept& rVar, [[maybe_unused]] size_t& rnSize)
           {
   
           }
   
           template <sdv::EEndian eTargetEndianess, typename TCRC>
           static sdv::serializer<eTargetEndianess, TCRC>& Serialize(sdv::serializer<eTargetEndianess, TCRC>& rSerializer, [[maybe_unused]] const sdv::ps::XMarshallExcept& rVar)
           {
               rSerializer << sdv::GetExceptionId<sdv::ps::XMarshallExcept>();
               return rSerializer;
           }
   
           template <sdv::EEndian eSourceEndianess, typename TCRC>
           static sdv::deserializer<eSourceEndianess, TCRC>& Deserialize(sdv::deserializer<eSourceEndianess, TCRC>& rDeserializer, [[maybe_unused]] sdv::ps::XMarshallExcept& rVar)
           {
               sdv::exception_id idLocal = 0ull;
               rDeserializer >> idLocal;
               if (idLocal != sdv::GetExceptionId<sdv::ps::XMarshallExcept>()) throw sdv::ps::XMarshallIntegrity{};
               return rDeserializer;
           }
       };
   
       template <>
       class CSerdes<sdv::ps::XMarshallNotInitialized>
       {
       public:
           static void CalcSize([[maybe_unused]] const sdv::ps::XMarshallNotInitialized& rVar, [[maybe_unused]] size_t& rnSize)
           {
   
           }
   
           template <sdv::EEndian eTargetEndianess, typename TCRC>
           static sdv::serializer<eTargetEndianess, TCRC>& Serialize(sdv::serializer<eTargetEndianess, TCRC>& rSerializer, [[maybe_unused]] const sdv::ps::XMarshallNotInitialized& rVar)
           {
               rSerializer << sdv::GetExceptionId<sdv::ps::XMarshallNotInitialized>();
               return rSerializer;
           }
   
           template <sdv::EEndian eSourceEndianess, typename TCRC>
           static sdv::deserializer<eSourceEndianess, TCRC>& Deserialize(sdv::deserializer<eSourceEndianess, TCRC>& rDeserializer, [[maybe_unused]] sdv::ps::XMarshallNotInitialized& rVar)
           {
               sdv::exception_id idLocal = 0ull;
               rDeserializer >> idLocal;
               if (idLocal != sdv::GetExceptionId<sdv::ps::XMarshallNotInitialized>()) throw sdv::ps::XMarshallIntegrity{};
               return rDeserializer;
           }
       };
   
       template <>
       class CSerdes<sdv::ps::XMarshallTimeout>
       {
       public:
           static void CalcSize([[maybe_unused]] const sdv::ps::XMarshallTimeout& rVar, [[maybe_unused]] size_t& rnSize)
           {
   
           }
   
           template <sdv::EEndian eTargetEndianess, typename TCRC>
           static sdv::serializer<eTargetEndianess, TCRC>& Serialize(sdv::serializer<eTargetEndianess, TCRC>& rSerializer, [[maybe_unused]] const sdv::ps::XMarshallTimeout& rVar)
           {
               rSerializer << sdv::GetExceptionId<sdv::ps::XMarshallTimeout>();
               return rSerializer;
           }
   
           template <sdv::EEndian eSourceEndianess, typename TCRC>
           static sdv::deserializer<eSourceEndianess, TCRC>& Deserialize(sdv::deserializer<eSourceEndianess, TCRC>& rDeserializer, [[maybe_unused]] sdv::ps::XMarshallTimeout& rVar)
           {
               sdv::exception_id idLocal = 0ull;
               rDeserializer >> idLocal;
               if (idLocal != sdv::GetExceptionId<sdv::ps::XMarshallTimeout>()) throw sdv::ps::XMarshallIntegrity{};
               return rDeserializer;
           }
       };
   
       template <>
       class CSerdes<sdv::ps::XMarshallMissingData>
       {
       public:
           static void CalcSize([[maybe_unused]] const sdv::ps::XMarshallMissingData& rVar, [[maybe_unused]] size_t& rnSize)
           {
   
           }
   
           template <sdv::EEndian eTargetEndianess, typename TCRC>
           static sdv::serializer<eTargetEndianess, TCRC>& Serialize(sdv::serializer<eTargetEndianess, TCRC>& rSerializer, [[maybe_unused]] const sdv::ps::XMarshallMissingData& rVar)
           {
               rSerializer << sdv::GetExceptionId<sdv::ps::XMarshallMissingData>();
               return rSerializer;
           }
   
           template <sdv::EEndian eSourceEndianess, typename TCRC>
           static sdv::deserializer<eSourceEndianess, TCRC>& Deserialize(sdv::deserializer<eSourceEndianess, TCRC>& rDeserializer, [[maybe_unused]] sdv::ps::XMarshallMissingData& rVar)
           {
               sdv::exception_id idLocal = 0ull;
               rDeserializer >> idLocal;
               if (idLocal != sdv::GetExceptionId<sdv::ps::XMarshallMissingData>()) throw sdv::ps::XMarshallIntegrity{};
               return rDeserializer;
           }
       };
   
       template <>
       class CSerdes<sdv::ps::XMarshallVersion>
       {
       public:
           static void CalcSize([[maybe_unused]] const sdv::ps::XMarshallVersion& rVar, [[maybe_unused]] size_t& rnSize)
           {
   
           }
   
           template <sdv::EEndian eTargetEndianess, typename TCRC>
           static sdv::serializer<eTargetEndianess, TCRC>& Serialize(sdv::serializer<eTargetEndianess, TCRC>& rSerializer, [[maybe_unused]] const sdv::ps::XMarshallVersion& rVar)
           {
               rSerializer << sdv::GetExceptionId<sdv::ps::XMarshallVersion>();
               return rSerializer;
           }
   
           template <sdv::EEndian eSourceEndianess, typename TCRC>
           static sdv::deserializer<eSourceEndianess, TCRC>& Deserialize(sdv::deserializer<eSourceEndianess, TCRC>& rDeserializer, [[maybe_unused]] sdv::ps::XMarshallVersion& rVar)
           {
               sdv::exception_id idLocal = 0ull;
               rDeserializer >> idLocal;
               if (idLocal != sdv::GetExceptionId<sdv::ps::XMarshallVersion>()) throw sdv::ps::XMarshallIntegrity{};
               return rDeserializer;
           }
       };
   
       template <>
       class CSerdes<sdv::ps::XMarshallIntegrity>
       {
       public:
           static void CalcSize([[maybe_unused]] const sdv::ps::XMarshallIntegrity& rVar, [[maybe_unused]] size_t& rnSize)
           {
   
           }
   
           template <sdv::EEndian eTargetEndianess, typename TCRC>
           static sdv::serializer<eTargetEndianess, TCRC>& Serialize(sdv::serializer<eTargetEndianess, TCRC>& rSerializer, [[maybe_unused]] const sdv::ps::XMarshallIntegrity& rVar)
           {
               rSerializer << sdv::GetExceptionId<sdv::ps::XMarshallIntegrity>();
               return rSerializer;
           }
   
           template <sdv::EEndian eSourceEndianess, typename TCRC>
           static sdv::deserializer<eSourceEndianess, TCRC>& Deserialize(sdv::deserializer<eSourceEndianess, TCRC>& rDeserializer, [[maybe_unused]] sdv::ps::XMarshallIntegrity& rVar)
           {
               sdv::exception_id idLocal = 0ull;
               rDeserializer >> idLocal;
               if (idLocal != sdv::GetExceptionId<sdv::ps::XMarshallIntegrity>()) throw sdv::ps::XMarshallIntegrity{};
               return rDeserializer;
           }
       };
   
       template <>
       class CSerdes<sdv::ps::XMarshallNoObject>
       {
       public:
           static void CalcSize([[maybe_unused]] const sdv::ps::XMarshallNoObject& rVar, [[maybe_unused]] size_t& rnSize)
           {
   
           }
   
           template <sdv::EEndian eTargetEndianess, typename TCRC>
           static sdv::serializer<eTargetEndianess, TCRC>& Serialize(sdv::serializer<eTargetEndianess, TCRC>& rSerializer, [[maybe_unused]] const sdv::ps::XMarshallNoObject& rVar)
           {
               rSerializer << sdv::GetExceptionId<sdv::ps::XMarshallNoObject>();
               return rSerializer;
           }
   
           template <sdv::EEndian eSourceEndianess, typename TCRC>
           static sdv::deserializer<eSourceEndianess, TCRC>& Deserialize(sdv::deserializer<eSourceEndianess, TCRC>& rDeserializer, [[maybe_unused]] sdv::ps::XMarshallNoObject& rVar)
           {
               sdv::exception_id idLocal = 0ull;
               rDeserializer >> idLocal;
               if (idLocal != sdv::GetExceptionId<sdv::ps::XMarshallNoObject>()) throw sdv::ps::XMarshallIntegrity{};
               return rDeserializer;
           }
       };
   
       template <>
       class CSerdes<sdv::ps::EMarshallFlags>
       {
       public:
           static void CalcSize(const sdv::ps::EMarshallFlags& rVar, size_t& rnSize)
           {
   
               // Calculating the size of EMarshallFlags
               sdv::ser_size(static_cast<uint32_t>(rVar), rnSize);
           }
   
           template <sdv::EEndian eTargetEndianess, typename TCRC>
           static sdv::serializer<eTargetEndianess, TCRC>& Serialize(sdv::serializer<eTargetEndianess, TCRC>& rSerializer, const sdv::ps::EMarshallFlags& rVar)
           {
               // Serializing members of EMarshallFlags
               rSerializer << static_cast<uint32_t>(rVar);
               return rSerializer;
           }
   
           template <sdv::EEndian eSourceEndianess, typename TCRC>
           static sdv::deserializer<eSourceEndianess, TCRC>& Deserialize(sdv::deserializer<eSourceEndianess, TCRC>& rDeserializer, sdv::ps::EMarshallFlags& rVar)
           {
               // Deserializing members of EMarshallFlags
               uint32_t base = 0;
               rDeserializer >> base;
               rVar = static_cast<sdv::ps::EMarshallFlags>(base);
               return rDeserializer;
           }
       };
   
       template <>
       class CSerdes<sdv::ps::SMarshallID>
       {
       public:
           static void CalcSize(const sdv::ps::SMarshallID& rVar, size_t& rnSize)
           {
   
               // Calculating the size of SMarshallID
               sdv::ser_size(rVar.uiHostID, rnSize);
               sdv::ser_size(rVar.tProcessID, rnSize);
               sdv::ser_size(rVar.uiIdent, rnSize);
               sdv::ser_size(rVar.uiControl, rnSize);
           }
   
           template <sdv::EEndian eTargetEndianess, typename TCRC>
           static sdv::serializer<eTargetEndianess, TCRC>& Serialize(sdv::serializer<eTargetEndianess, TCRC>& rSerializer, const sdv::ps::SMarshallID& rVar)
           {
               // Serializing members of SMarshallID
               rSerializer << rVar.uiHostID;
               rSerializer << rVar.tProcessID;
               rSerializer << rVar.uiIdent;
               rSerializer << rVar.uiControl;
               return rSerializer;
           }
   
           template <sdv::EEndian eSourceEndianess, typename TCRC>
           static sdv::deserializer<eSourceEndianess, TCRC>& Deserialize(sdv::deserializer<eSourceEndianess, TCRC>& rDeserializer, sdv::ps::SMarshallID& rVar)
           {
               // Deserializing members of SMarshallID
               rDeserializer >> rVar.uiHostID;
               rDeserializer >> rVar.tProcessID;
               rDeserializer >> rVar.uiIdent;
               rDeserializer >> rVar.uiControl;
               return rDeserializer;
           }
       };
   
       template <>
       class CSerdes<sdv::ps::SMarshall>
       {
       public:
           static void CalcSize(const sdv::ps::SMarshall& rVar, size_t& rnSize)
           {
   
               // Calculating the size of SMarshall
               sdv::ser_size(rVar.eEndian, rnSize);
               sdv::ser_size(rVar.uiVersion, rnSize);
               sdv::ser_size(rVar.tIfcId, rnSize);
               sdv::ser_size(rVar.uiFuncIndex, rnSize);
               sdv::ser_size(rVar.seqChecksums, rnSize);
               sdv::ser_size(rVar.uiFlags, rnSize);
               sdv::ser_size(rVar.uiHdrChecksum, rnSize);
           }
   
           template <sdv::EEndian eTargetEndianess, typename TCRC>
           static sdv::serializer<eTargetEndianess, TCRC>& Serialize(sdv::serializer<eTargetEndianess, TCRC>& rSerializer, const sdv::ps::SMarshall& rVar)
           {
               // Serializing members of SMarshall
               rSerializer << rVar.eEndian;
               rSerializer << rVar.uiVersion;
               rSerializer << rVar.tIfcId;
               rSerializer << rVar.uiFuncIndex;
               rSerializer << rVar.seqChecksums;
               rSerializer << rVar.uiFlags;
               rSerializer << rVar.uiHdrChecksum;
               return rSerializer;
           }
   
           template <sdv::EEndian eSourceEndianess, typename TCRC>
           static sdv::deserializer<eSourceEndianess, TCRC>& Deserialize(sdv::deserializer<eSourceEndianess, TCRC>& rDeserializer, sdv::ps::SMarshall& rVar)
           {
               // Deserializing members of SMarshall
               rDeserializer >> rVar.eEndian;
               rDeserializer >> rVar.uiVersion;
               rDeserializer >> rVar.tIfcId;
               rDeserializer >> rVar.uiFuncIndex;
               rDeserializer >> rVar.seqChecksums;
               rDeserializer >> rVar.uiFlags;
               rDeserializer >> rVar.uiHdrChecksum;
               return rDeserializer;
           }
       };
   
       template <>
       class CSerdes<sdv::ps::EMarshallDataInterpret>
       {
       public:
           static void CalcSize(const sdv::ps::EMarshallDataInterpret& rVar, size_t& rnSize)
           {
   
               // Calculating the size of EMarshallDataInterpret
               sdv::ser_size(static_cast<uint32_t>(rVar), rnSize);
           }
   
           template <sdv::EEndian eTargetEndianess, typename TCRC>
           static sdv::serializer<eTargetEndianess, TCRC>& Serialize(sdv::serializer<eTargetEndianess, TCRC>& rSerializer, const sdv::ps::EMarshallDataInterpret& rVar)
           {
               // Serializing members of EMarshallDataInterpret
               rSerializer << static_cast<uint32_t>(rVar);
               return rSerializer;
           }
   
           template <sdv::EEndian eSourceEndianess, typename TCRC>
           static sdv::deserializer<eSourceEndianess, TCRC>& Deserialize(sdv::deserializer<eSourceEndianess, TCRC>& rDeserializer, sdv::ps::EMarshallDataInterpret& rVar)
           {
               // Deserializing members of EMarshallDataInterpret
               uint32_t base = 0;
               rDeserializer >> base;
               rVar = static_cast<sdv::ps::EMarshallDataInterpret>(base);
               return rDeserializer;
           }
       };
   
       template <>
       class CSerdes<sdv::ps::SMarshallAddress>
       {
       public:
           static void CalcSize(const sdv::ps::SMarshallAddress& rVar, size_t& rnSize)
           {
   
               // Calculating the size of SMarshallAddress
               sdv::ser_size(rVar.eEndian, rnSize);
               sdv::ser_size(rVar.uiVersion, rnSize);
               sdv::ser_size(rVar.eInterpret, rnSize);
               sdv::ser_size(rVar.tProxyID, rnSize);
               sdv::ser_size(rVar.tStubID, rnSize);
               sdv::ser_size(rVar.uiCallIndex, rnSize);
           }
   
           template <sdv::EEndian eTargetEndianess, typename TCRC>
           static sdv::serializer<eTargetEndianess, TCRC>& Serialize(sdv::serializer<eTargetEndianess, TCRC>& rSerializer, const sdv::ps::SMarshallAddress& rVar)
           {
               // Serializing members of SMarshallAddress
               rSerializer << rVar.eEndian;
               rSerializer << rVar.uiVersion;
               rSerializer << rVar.eInterpret;
               rSerializer << rVar.tProxyID;
               rSerializer << rVar.tStubID;
               rSerializer << rVar.uiCallIndex;
               return rSerializer;
           }
   
           template <sdv::EEndian eSourceEndianess, typename TCRC>
           static sdv::deserializer<eSourceEndianess, TCRC>& Deserialize(sdv::deserializer<eSourceEndianess, TCRC>& rDeserializer, sdv::ps::SMarshallAddress& rVar)
           {
               // Deserializing members of SMarshallAddress
               rDeserializer >> rVar.eEndian;
               rDeserializer >> rVar.uiVersion;
               rDeserializer >> rVar.eInterpret;
               rDeserializer >> rVar.tProxyID;
               rDeserializer >> rVar.tStubID;
               rDeserializer >> rVar.uiCallIndex;
               return rDeserializer;
           }
       };
   
       template <>
       class CSerdes<sdv::ps::IMarshallObjectIdent*>
       {
       public:
           static void CalcSize([[maybe_unused]] sdv::ps::IMarshallObjectIdent* pInterface, size_t& rnSize)
           {
               sdv::ser_size(sdv::interface_id(), rnSize);
               sdv::ser_size(sdv::ps::TMarshallID(), rnSize);
           }
   
           template <sdv::EEndian eTargetEndianess, typename TCRC>
           static sdv::serializer<eTargetEndianess, TCRC>& Serialize(sdv::serializer<eTargetEndianess, TCRC>& rSerializer, sdv::ps::IMarshallObjectIdent* pInterface)
           {
               // Get interface to the component isolation service.
               auto ptrComControl = sdv::core::GetObject("CommunicationControl");
               if (!ptrComControl) throw sdv::ps::XMarshallNotInitialized{};
               sdv::ps::IMarshallAccess* pMarshallAccess = ptrComControl.GetInterface<sdv::ps::IMarshallAccess>();
               if (!pMarshallAccess) throw sdv::ps::XMarshallNotInitialized{};
   
               // Serialize the interface ID first
               rSerializer << sdv::GetInterfaceId<sdv::ps::IMarshallObjectIdent>();
   
               // Create and serialize a stub object for the interface.
               sdv::ps::TMarshallID tStubID = pMarshallAccess->GetStub(pInterface);
               rSerializer << tStubID;
   
               return rSerializer;
           }
   
           template <sdv::EEndian eSourceEndianess, typename TCRC>
           static sdv::deserializer<eSourceEndianess, TCRC>& Deserialize(sdv::deserializer<eSourceEndianess, TCRC>& rDeserializer, sdv::ps::IMarshallObjectIdent*& rpInterface)
           {
               // Get interface to the component isolation service.
               auto ptrComControl = sdv::core::GetObject("CommunicationControl");
               if (!ptrComControl) throw sdv::ps::XMarshallNotInitialized{};
               sdv::ps::IMarshallAccess* pMarshallAccess = ptrComControl.GetInterface<sdv::ps::IMarshallAccess>();
               if (!pMarshallAccess) throw sdv::ps::XMarshallNotInitialized{};
   
               // Get the interface ID
               sdv::interface_id id = 0;
               rDeserializer >> id;
   
               // Get the stub ID
               sdv::ps::TMarshallID tStubID{};
               rDeserializer >> tStubID;
   
               // Create the proxy
               rpInterface = pMarshallAccess->GetProxy(tStubID, id).get<sdv::ps::IMarshallObjectIdent>();
   
               return rDeserializer;
           }
       };
   
       template <>
       class CSerdes<sdv::ps::IMarshallLink*>
       {
       public:
           static void CalcSize([[maybe_unused]] sdv::ps::IMarshallLink* pInterface, size_t& rnSize)
           {
               sdv::ser_size(sdv::interface_id(), rnSize);
               sdv::ser_size(sdv::ps::TMarshallID(), rnSize);
           }
   
           template <sdv::EEndian eTargetEndianess, typename TCRC>
           static sdv::serializer<eTargetEndianess, TCRC>& Serialize(sdv::serializer<eTargetEndianess, TCRC>& rSerializer, sdv::ps::IMarshallLink* pInterface)
           {
               // Get interface to the component isolation service.
               auto ptrComControl = sdv::core::GetObject("CommunicationControl");
               if (!ptrComControl) throw sdv::ps::XMarshallNotInitialized{};
               sdv::ps::IMarshallAccess* pMarshallAccess = ptrComControl.GetInterface<sdv::ps::IMarshallAccess>();
               if (!pMarshallAccess) throw sdv::ps::XMarshallNotInitialized{};
   
               // Serialize the interface ID first
               rSerializer << sdv::GetInterfaceId<sdv::ps::IMarshallLink>();
   
               // Create and serialize a stub object for the interface.
               sdv::ps::TMarshallID tStubID = pMarshallAccess->GetStub(pInterface);
               rSerializer << tStubID;
   
               return rSerializer;
           }
   
           template <sdv::EEndian eSourceEndianess, typename TCRC>
           static sdv::deserializer<eSourceEndianess, TCRC>& Deserialize(sdv::deserializer<eSourceEndianess, TCRC>& rDeserializer, sdv::ps::IMarshallLink*& rpInterface)
           {
               // Get interface to the component isolation service.
               auto ptrComControl = sdv::core::GetObject("CommunicationControl");
               if (!ptrComControl) throw sdv::ps::XMarshallNotInitialized{};
               sdv::ps::IMarshallAccess* pMarshallAccess = ptrComControl.GetInterface<sdv::ps::IMarshallAccess>();
               if (!pMarshallAccess) throw sdv::ps::XMarshallNotInitialized{};
   
               // Get the interface ID
               sdv::interface_id id = 0;
               rDeserializer >> id;
   
               // Get the stub ID
               sdv::ps::TMarshallID tStubID{};
               rDeserializer >> tStubID;
   
               // Create the proxy
               rpInterface = pMarshallAccess->GetProxy(tStubID, id).get<sdv::ps::IMarshallLink>();
   
               return rDeserializer;
           }
       };
   
       template <>
       class CSerdes<sdv::ps::IProxyControl*>
       {
       public:
           static void CalcSize([[maybe_unused]] sdv::ps::IProxyControl* pInterface, size_t& rnSize)
           {
               sdv::ser_size(sdv::interface_id(), rnSize);
               sdv::ser_size(sdv::ps::TMarshallID(), rnSize);
           }
   
           template <sdv::EEndian eTargetEndianess, typename TCRC>
           static sdv::serializer<eTargetEndianess, TCRC>& Serialize(sdv::serializer<eTargetEndianess, TCRC>& rSerializer, sdv::ps::IProxyControl* pInterface)
           {
               // Get interface to the component isolation service.
               auto ptrComControl = sdv::core::GetObject("CommunicationControl");
               if (!ptrComControl) throw sdv::ps::XMarshallNotInitialized{};
               sdv::ps::IMarshallAccess* pMarshallAccess = ptrComControl.GetInterface<sdv::ps::IMarshallAccess>();
               if (!pMarshallAccess) throw sdv::ps::XMarshallNotInitialized{};
   
               // Serialize the interface ID first
               rSerializer << sdv::GetInterfaceId<sdv::ps::IProxyControl>();
   
               // Create and serialize a stub object for the interface.
               sdv::ps::TMarshallID tStubID = pMarshallAccess->GetStub(pInterface);
               rSerializer << tStubID;
   
               return rSerializer;
           }
   
           template <sdv::EEndian eSourceEndianess, typename TCRC>
           static sdv::deserializer<eSourceEndianess, TCRC>& Deserialize(sdv::deserializer<eSourceEndianess, TCRC>& rDeserializer, sdv::ps::IProxyControl*& rpInterface)
           {
               // Get interface to the component isolation service.
               auto ptrComControl = sdv::core::GetObject("CommunicationControl");
               if (!ptrComControl) throw sdv::ps::XMarshallNotInitialized{};
               sdv::ps::IMarshallAccess* pMarshallAccess = ptrComControl.GetInterface<sdv::ps::IMarshallAccess>();
               if (!pMarshallAccess) throw sdv::ps::XMarshallNotInitialized{};
   
               // Get the interface ID
               sdv::interface_id id = 0;
               rDeserializer >> id;
   
               // Get the stub ID
               sdv::ps::TMarshallID tStubID{};
               rDeserializer >> tStubID;
   
               // Create the proxy
               rpInterface = pMarshallAccess->GetProxy(tStubID, id).get<sdv::ps::IProxyControl>();
   
               return rDeserializer;
           }
       };
   
       template <>
       class CSerdes<sdv::ps::IStubLink*>
       {
       public:
           static void CalcSize([[maybe_unused]] sdv::ps::IStubLink* pInterface, size_t& rnSize)
           {
               sdv::ser_size(sdv::interface_id(), rnSize);
               sdv::ser_size(sdv::ps::TMarshallID(), rnSize);
           }
   
           template <sdv::EEndian eTargetEndianess, typename TCRC>
           static sdv::serializer<eTargetEndianess, TCRC>& Serialize(sdv::serializer<eTargetEndianess, TCRC>& rSerializer, sdv::ps::IStubLink* pInterface)
           {
               // Get interface to the component isolation service.
               auto ptrComControl = sdv::core::GetObject("CommunicationControl");
               if (!ptrComControl) throw sdv::ps::XMarshallNotInitialized{};
               sdv::ps::IMarshallAccess* pMarshallAccess = ptrComControl.GetInterface<sdv::ps::IMarshallAccess>();
               if (!pMarshallAccess) throw sdv::ps::XMarshallNotInitialized{};
   
               // Serialize the interface ID first
               rSerializer << sdv::GetInterfaceId<sdv::ps::IStubLink>();
   
               // Create and serialize a stub object for the interface.
               sdv::ps::TMarshallID tStubID = pMarshallAccess->GetStub(pInterface);
               rSerializer << tStubID;
   
               return rSerializer;
           }
   
           template <sdv::EEndian eSourceEndianess, typename TCRC>
           static sdv::deserializer<eSourceEndianess, TCRC>& Deserialize(sdv::deserializer<eSourceEndianess, TCRC>& rDeserializer, sdv::ps::IStubLink*& rpInterface)
           {
               // Get interface to the component isolation service.
               auto ptrComControl = sdv::core::GetObject("CommunicationControl");
               if (!ptrComControl) throw sdv::ps::XMarshallNotInitialized{};
               sdv::ps::IMarshallAccess* pMarshallAccess = ptrComControl.GetInterface<sdv::ps::IMarshallAccess>();
               if (!pMarshallAccess) throw sdv::ps::XMarshallNotInitialized{};
   
               // Get the interface ID
               sdv::interface_id id = 0;
               rDeserializer >> id;
   
               // Get the stub ID
               sdv::ps::TMarshallID tStubID{};
               rDeserializer >> tStubID;
   
               // Create the proxy
               rpInterface = pMarshallAccess->GetProxy(tStubID, id).get<sdv::ps::IStubLink>();
   
               return rDeserializer;
           }
       };
   
       template <>
       class CSerdes<sdv::ps::IMarshallAccess*>
       {
       public:
           static void CalcSize([[maybe_unused]] sdv::ps::IMarshallAccess* pInterface, size_t& rnSize)
           {
               sdv::ser_size(sdv::interface_id(), rnSize);
               sdv::ser_size(sdv::ps::TMarshallID(), rnSize);
           }
   
           template <sdv::EEndian eTargetEndianess, typename TCRC>
           static sdv::serializer<eTargetEndianess, TCRC>& Serialize(sdv::serializer<eTargetEndianess, TCRC>& rSerializer, sdv::ps::IMarshallAccess* pInterface)
           {
               // Get interface to the component isolation service.
               auto ptrComControl = sdv::core::GetObject("CommunicationControl");
               if (!ptrComControl) throw sdv::ps::XMarshallNotInitialized{};
               sdv::ps::IMarshallAccess* pMarshallAccess = ptrComControl.GetInterface<sdv::ps::IMarshallAccess>();
               if (!pMarshallAccess) throw sdv::ps::XMarshallNotInitialized{};
   
               // Serialize the interface ID first
               rSerializer << sdv::GetInterfaceId<sdv::ps::IMarshallAccess>();
   
               // Create and serialize a stub object for the interface.
               sdv::ps::TMarshallID tStubID = pMarshallAccess->GetStub(pInterface);
               rSerializer << tStubID;
   
               return rSerializer;
           }
   
           template <sdv::EEndian eSourceEndianess, typename TCRC>
           static sdv::deserializer<eSourceEndianess, TCRC>& Deserialize(sdv::deserializer<eSourceEndianess, TCRC>& rDeserializer, sdv::ps::IMarshallAccess*& rpInterface)
           {
               // Get interface to the component isolation service.
               auto ptrComControl = sdv::core::GetObject("CommunicationControl");
               if (!ptrComControl) throw sdv::ps::XMarshallNotInitialized{};
               sdv::ps::IMarshallAccess* pMarshallAccess = ptrComControl.GetInterface<sdv::ps::IMarshallAccess>();
               if (!pMarshallAccess) throw sdv::ps::XMarshallNotInitialized{};
   
               // Get the interface ID
               sdv::interface_id id = 0;
               rDeserializer >> id;
   
               // Get the stub ID
               sdv::ps::TMarshallID tStubID{};
               rDeserializer >> tStubID;
   
               // Create the proxy
               rpInterface = pMarshallAccess->GetProxy(tStubID, id).get<sdv::ps::IMarshallAccess>();
   
               return rDeserializer;
           }
       };
   } // serdes namespace
   
   #endif // !defined(__IDL_GENERATED__CORE_PS_SERDES_H__20251008_120501_717__)
