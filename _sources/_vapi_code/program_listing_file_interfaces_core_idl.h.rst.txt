
.. _program_listing_file_interfaces_core_idl.h:

Program Listing for File core_idl.h
===================================

|exhale_lsh| :ref:`Return to documentation for file <file_interfaces_core_idl.h>` (``interfaces\core_idl.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef __IDL_GENERATED__CORE_IDL_H__20251008_120501_59__
   #define __IDL_GENERATED__CORE_IDL_H__20251008_120501_59__
   
   #ifdef _MSC_VER
   // Prevent bogus warnings about uninitialized members during static code analysis.
   #pragma warning(push)
   #pragma warning(disable : 26495)
   #endif
   
   // Provide fixed width integer types.
   #include <cstdint>
   
   #include "core.h"
   
   #include "mem.h"
   
   namespace sdv
   {
       namespace idl
       {
           except XCompileError
           {
               inline static const ::sdv::exception_id _id = 0x650594E6C9489FBB;
   
               inline static const char _description[] = "XCompileError exception";
               sdv::u8string ssReason;
   
               sdv::u8string ssFile;
   
               uint32_t uiLine;
   
               uint32_t uiCol;
   
               sdv::u8string ssToken;
   
               sdv::u8string ssLine;
   
               virtual const char* what() const noexcept { return _description; }
   
               virtual ::sdv::exception_id id() const noexcept { return _id; }
           };
   
           static const sdv::u8string ssOptionDevEnvDir = u8"DevEnvDir";
   
           static const sdv::u8string ssOptionOutDir = u8"OutDir";
   
           static const sdv::u8string ssOptionFilename = u8"Filename";
   
           static const sdv::u8string ssOptionFilePath = u8"FilePath";
   
           static const sdv::u8string ssOptionCodeGen = u8"CodeGen";
   
           interface ICompilerOption
           {
               static constexpr ::sdv::interface_id _id = 0xC27C1ABDE939E87F;
   
               virtual sdv::u8string GetOption(/*in*/ const sdv::u8string& rssOption) const = 0;
   
               virtual uint32_t GetOptionCnt(/*in*/ const sdv::u8string& rssOption) const = 0;
   
               virtual sdv::u8string GetOptionN(/*in*/ const sdv::u8string& rssOption, /*in*/ uint32_t uiIndex) const = 0;
           };
   
           interface ICompilerInfo
           {
               static constexpr ::sdv::interface_id _id = 0x7A9A8C8060A409A2;
   
               virtual sdv::u8string GetFilePath() const = 0;
   
               virtual sdv::u8string GetOutputDir() const = 0;
           };
   
           enum class EEntityType : uint32_t
           {
               type_unknown,
   
               type_variable,
   
               type_enum,
   
               type_struct,
   
               type_union,
   
               type_module,
   
               type_interface,
   
               type_exception,
   
               type_attribute,
   
               type_operation,
   
               type_parameter,
   
               type_enum_entry,
   
               type_case_entry,
   
               type_switch_variable,
   
               type_typedef,
   
               type_meta,
           };
   
           enum class EDeclType : uint32_t
           {
               decltype_unknown,
   
               decltype_short,
   
               decltype_long,
   
               decltype_long_long,
   
               decltype_octet,
   
               decltype_unsigned_short,
   
               decltype_unsigned_long,
   
               decltype_unsigned_long_long,
   
               decltype_float,
   
               decltype_double,
   
               decltype_long_double,
   
               decltype_fixed,
   
               decltype_char,
   
               decltype_char16,
   
               decltype_char32,
   
               decltype_wchar,
   
               decltype_boolean,
   
               decltype_native,
   
               decltype_string,
   
               decltype_u8string,
   
               decltype_u16string,
   
               decltype_u32string,
   
               decltype_wstring,
   
               decltype_enum,
   
               decltype_struct,
   
               decltype_union,
   
               decltype_module,
   
               decltype_interface,
   
               decltype_exception,
   
               decltype_attribute,
   
               decltype_operation,
   
               decltype_parameter,
   
               decltype_enum_entry,
   
               decltype_case_entry,
   
               decltype_typedef,
   
               decltype_void,
   
               decltype_meta,
   
               decltype_pointer,
   
               decltype_sequence,
   
               decltype_map,
   
               decltype_bitset,
   
               decltype_bitfield,
   
               decltype_bitmask,
   
               decltype_any,
   
               decltype_interface_id,
   
               decltype_interface_type,
   
               decltype_exception_id,
           };
   
           interface IEntityInfo
           {
               static constexpr ::sdv::interface_id _id = 0x46BEDE6CC5C91F72;
   
               virtual EEntityType GetType() const = 0;
   
               virtual sdv::u8string GetName() const = 0;
   
               virtual sdv::u8string GetScopedName() const = 0;
   
               virtual bool ForwardDeclaration() const = 0;
   
               virtual uint64_t GetId() const = 0;
   
               virtual IInterfaceAccess* GetParent() const = 0;
           };
   
           interface IEntityIterator
           {
               static constexpr ::sdv::interface_id _id = 0x7177BA8E9BF61AA7;
   
               virtual uint32_t GetCount() const = 0;
   
               virtual IInterfaceAccess* GetEntityByIndex(/*in*/ uint32_t uiIndex) = 0;
           };
   
           interface IEntityContext
           {
               static constexpr ::sdv::interface_id _id = 0xCDC79F5E7E643529;
   
               enum class ELocation : uint32_t
               {
                   source,
   
                   local_include,
   
                   global_include,
               };
   
               virtual ELocation GetLocation() const = 0;
   
               virtual sdv::u8string GetSourcePath() const = 0;
   
               virtual void GetPosition(/*out*/ uint32_t& ruiLineBegin, /*out*/ uint32_t& ruiColBegin, /*out*/ uint32_t& ruiLineEnd, /*out*/ uint32_t& ruiColEnd) = 0;
           };
   
           interface IMetaEntity
           {
               static constexpr ::sdv::interface_id _id = 0xE33E8D1A971D0D7C;
   
               enum class EType : uint32_t
               {
                   include_local = 10,
   
                   include_global = 11,
   
                   define = 20,
   
                   undef = 21,
   
                   verbatim = 100,
               };
   
               virtual EType GetMetaType() const = 0;
   
               virtual sdv::u8string GetContent() const = 0;
           };
   
           interface IEntityComments
           {
               static constexpr ::sdv::interface_id _id = 0xEE1AD4FC2B9217BB;
   
               enum class ECommentMask : uint32_t
               {
                   c_style_javadoc = 0x40001000,
   
                   c_style_javadoc_post = 0x40201000,
   
                   c_style_qt = 0x40002000,
   
                   c_style_qt_post = 0x40202000,
   
                   c_style = 0x40000000,
   
                   cpp_style_javadoc = 0x80001000,
   
                   cpp_style_javadoc_post = 0x80201000,
   
                   cpp_style_qt = 0x80002000,
   
                   cpp_style_qt_post = 0x80202000,
   
                   cpp_style = 0x80000000,
   
                   loc_succeeding = 0x00200000,
   
                   format_javadoc = 0x00001000,
   
                   format_qt = 0x00002000,
   
                   format_mask = 0x0000f000,
               };
   
               virtual sdv::u8string GetComments(/*out*/ uint32_t& ruiFlags) const = 0;
           };
   
           interface IDefinitionEntity
           {
               static constexpr ::sdv::interface_id _id = 0xC7BB02340D82D7AE;
   
               virtual bool IsUnnamed() const = 0;
   
               virtual IEntityIterator* GetChildren() = 0;
   
               virtual IEntityIterator* GetInheritance() = 0;
           };
   
           interface IForwardDeclarationEntity
           {
               static constexpr ::sdv::interface_id _id = 0x3BE934D755332130;
   
               virtual IInterfaceAccess* GetEntity() = 0;
           };
   
           interface IDeclarationType
           {
               static constexpr ::sdv::interface_id _id = 0x50100506F3C91498;
   
               virtual EDeclType GetBaseType() const = 0;
   
               virtual sdv::u8string GetTypeString() const = 0;
   
               virtual IInterfaceAccess* GetTypeDefinition() const = 0;
   
               virtual uint32_t GetFixedLength() const = 0;
   
               virtual uint32_t GetDecimals() const = 0;
   
               virtual IInterfaceAccess* GetValueType() const = 0;
   
               virtual IInterfaceAccess* GetKeyType() const = 0;
           };
   
           struct SArrayDimension
           {
               enum class EDimensionType : uint32_t
               {
                   bound = 0,
   
                   unbound = 2,
               };
   
               EDimensionType eType;
   
               sdv::u8string ssExpression;
           };
   
           interface IDeclarationEntity
           {
               static constexpr ::sdv::interface_id _id = 0xE0135FBD85B21E86;
   
               virtual IInterfaceAccess* GetDeclarationType() const = 0;
   
               virtual bool IsReadOnly() const = 0;
   
               virtual bool IsAnonymous() const = 0;
   
               virtual bool HasArray() const = 0;
   
               virtual sdv::sequence<SArrayDimension> GetArrayDimensions() const = 0;
   
               virtual bool HasAssignment() const = 0;
   
               virtual sdv::u8string GetAssignment() const = 0;
           };
   
           interface IInterfaceEntity
           {
               static constexpr ::sdv::interface_id _id = 0x1C7491088C1C6C3F;
   
               virtual bool IsLocal() const = 0;
           };
   
           interface IOperationEntity
           {
               static constexpr ::sdv::interface_id _id = 0x75F2DA445EB605EE;
   
               virtual IEntityIterator* GetParameters() = 0;
   
               virtual IEntityIterator* GetExceptions() = 0;
           };
   
           interface IAttributeEntity
           {
               static constexpr ::sdv::interface_id _id = 0x492ABA076F15A69B;
   
               virtual IEntityIterator* GetReadExceptions() = 0;
   
               virtual IEntityIterator* GetWriteExceptions() = 0;
           };
   
           interface IParameterEntity
           {
               static constexpr ::sdv::interface_id _id = 0xCF79131CE1B17AA3;
   
               enum class EParameterDirection : uint32_t
               {
                   unknown,
   
                   input,
   
                   output,
   
                   in_out,
               };
   
               virtual EParameterDirection GetDirection() const = 0;
           };
   
           interface IEnumEntity
           {
               static constexpr ::sdv::interface_id _id = 0xCF4D94C9746CA76F;
   
               virtual void GetBaseType(/*out*/ EDeclType& reType, /*out*/ IInterfaceAccess*& rpType) const = 0;
           };
   
           interface IUnionEntity
           {
               static constexpr ::sdv::interface_id _id = 0x23A3AFF91945A3B3;
   
               enum class ESwitchInterpret : uint32_t
               {
                   switch_variable,
   
                   switch_type,
               };
   
               virtual ESwitchInterpret GetSwitchInterpretation() const = 0;
   
               virtual void GetSwitchType(/*out*/ EDeclType& reType, /*out*/ IInterfaceAccess*& rpType) const = 0;
   
               virtual void GetSwitchVar(/*out*/ sdv::u8string& rssVarStr, /*out*/ IInterfaceAccess*& rpVarEntity, /*out*/ IInterfaceAccess*& rpVarContainer) const = 0;
           };
   
           interface ICaseEntity
           {
               static constexpr ::sdv::interface_id _id = 0x6018B17C44F736F3;
   
               virtual sdv::u8string GetLabel() const = 0;
   
               virtual bool IsDefault() const = 0;
           };
       }
   }
   
   #ifdef _MSC_VER
   #pragma warning(pop)
   #endif
   
   #endif // !defined(__IDL_GENERATED__CORE_IDL_H__20251008_120501_68__)
