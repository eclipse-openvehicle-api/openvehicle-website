
.. _program_listing_file_sdv_idl_compiler_entities_enum_entity.h:

Program Listing for File enum_entity.h
======================================

|exhale_lsh| :ref:`Return to documentation for file <file_sdv_idl_compiler_entities_enum_entity.h>` (``sdv_idl_compiler\entities\enum_entity.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef ENUM_ENTITY_H
   #define ENUM_ENTITY_H
   
   #include "definition_entity.h"
   #include "declaration_entity.h"
   #include "variable_entity.h"
   
   class CEnumEntry : public CDeclarationEntity
   {
   public:
       CEnumEntry(const CContextPtr& rptrContext, CEntityPtr ptrParent);
   
       virtual ~CEnumEntry() override = default;
   
       virtual sdv::idl::EEntityType GetType() const override { return sdv::idl::EEntityType::type_enum_entry; }
   
       virtual std::string GetDeclTypeStr(bool bResolveTypedef) const override;
   
       virtual void Process() override;
   
       virtual bool SupportAssignments() const override { return true; }
   
       // Suppress cppcheck warning of a useless override. The function is here for better understanding.
       // cppcheck-suppress uselessOverride
       virtual bool IsReadOnly() const override { return true; }
   
       virtual bool SupportMultipleDeclarations() const override { return true; }
   
       virtual bool DoNotEnfoceNextDeclarationAfterComma() const override { return true; }
   };
   
   class CEnumEntity : public CDefinitionEntity, public sdv::idl::IEnumEntity
   {
   public:
       CEnumEntity(const CContextPtr& rptrContext, CEntityPtr ptrParent);
   
       virtual ~CEnumEntity() override = default;
   
       virtual sdv::interface_t GetInterface(sdv::interface_id idInterface) override;
   
       virtual sdv::idl::EEntityType GetType() const override { return  sdv::idl::EEntityType::type_enum; }
   
       virtual std::string GetDeclTypeStr(bool bResolveTypedef) const override;
   
       virtual void GetBaseType(sdv::idl::EDeclType& reType, sdv::IInterfaceAccess*& rpType) const override;
   
       virtual void Process() override;
   
       virtual void ProcessContent() override;
   
       virtual void ProcessDefinitionAddendum() override;
   
       sdv::idl::EDeclType GetEnumType() const { return m_typedecl.GetBaseType(); }
   
       virtual bool Supports(EDefinitionSupport eSupport) const override;
   
       virtual bool SupportsChildren() const override { return true; }
   
       virtual bool SupportsAnonymous() const override { return true; }
   
       virtual bool SupportsInheritance() const override { return true; }
   
       virtual void CreateValueNode() override;
   
   private:
       CTypeDeclaration    m_typedecl;        
   };
   
   #endif // !defined(ENUM_ENTITY_H)
